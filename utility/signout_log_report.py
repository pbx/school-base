#!/usr/bin/env python
"""
Basic munging of logfile generated by sign-out-of-class-form script.



One oddity this has to handle is Apache's shifting timestamps. It seems to randomly skip between the east and west coasts. At least it keeps track of the time zone. Samples:

2008-01-22T04:33:47-08:00...
2008-01-22T07:38:07-05:00...
2008-01-22T04:39:04-08:00...
2008-01-22T04:40:12-08:00...
"""

import os
import sys
import csv
import datetime, time
import StringIO
from optparse import OptionParser
os.environ['DJANGO_SETTINGS_MODULE'] = "settings"
from infobase.models import Scan, Person, ClassMeeting, SECTIONS


def parse_iso8601(timestamp):
    """
    Hacky ISO8601 parsing, including timestamp. Why isn't this in stdlib?!
    """
    localtime, timezone = timestamp.rsplit("-", 1)
    timebits = time.strptime(localtime, "%Y-%m-%dT%H:%M:%S")
    result = datetime.datetime(*timebits[:6])
    hour_adjust = datetime.timedelta(hours=int(timezone[:2])-5)
    result += hour_adjust
    return result


class CSVRow(object):
    """Abstraction to make handling CSVs a little cleaner"""
    colnames = "timestamp firstname lastname email id_number section classname date time assignment location".split()
    colmap = dict(zip(colnames, range(len(colnames))))
    def __init__(self, row):
        self.data = row
    def __getattr__(self, key):
        # TODO: callbacks for postprocessing and sanitizing, rather than inlined if/then
        value = self.data[self.colmap[key]]
        if key == "timestamp":
            value = parse_iso8601(value)
        if key in ('firstname, lastname') and value[0] != value[0].upper():
            value = value.title()
        if key == "date":
            # Fix non-standard logged date
            bits = value.split("-")
            value = "-".join([bits[2], bits[0], bits[1]])
        return value
        
    def markdown(self):
        return "* %s %s (%s)" % (self.firstname, self.lastname, self.timestamp)
        
    def relevant(self, date):
        """Is this signout row relevant to the report week?"""
        dates = [date + datetime.timedelta(day) for day in range(5)]
        return _iso8601_to_date(self.date) in dates


    def __cmp__(self, other):
        """Compare one row to another: classname, date, time"""
        if self.classname == other.classname:
            if self.date == other.date:
                if self.section == other.section:
                    return cmp(self.lastname, other.lastname)
                else:
                    return cmp(SECTIONS.index(self.section), SECTIONS.index(other.section))
            else:
                return cmp(self.date, other.date)
        else:
            return cmp(self.classname, other.classname)

    def heading(self):
        """A tidy heading that identifies the classmeeting"""
        return "## %s, %s %s, Section %s" % (self.classname, self.date, self.time, self.section)


def import_csv(path):
    """
    Import data from CSV file at `path` and return sorted list of rows
    """
    reader = csv.reader(open(path, 'U'), skipinitialspace=True)
    rows = list(reader)
    if rows[0][0] == "timestamp":
        rows = rows[1:]  # drop first row if it's just labels
    return sorted(CSVRow(r) for r in rows)


def signout_report(rows, date, format):
    """
    Print a signout report
    """
    if format == "markdown":
        print "# Signout report for week of %04d-%02d-%02d" % (date.year, date.month, date.day)
        lastheading = None
        for row in rows:
            if row.relevant(date):
                if row.heading() != lastheading:
                    print "\n", row.heading()
                    lastheading = row.heading()
                print row.markdown()
    elif format == "csv":
        relevant_rows = [r.data for r in rows if r.relevant(date)]
        output = StringIO.StringIO()
        writer = csv.writer(output)
        writer.writerows(relevant_rows)
        print output.getvalue()

def _iso8601_to_date(date_string):
    """
    Convert a string like '2008-01-01' to a datetime.date object
    """
    date_bits = map(int,date_string.split('-'))
    date = datetime.date(*date_bits)
    return date

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-f", "--format",
        dest="format",
        default="csv",
        help="Output format: csv (default) or markdown")
    parser.add_option("-i", "--input",
        dest="input", 
        help="Path of CSV signout log data")
    parser.add_option("-d", "--date",
        dest="date", 
        help="Beginning date of week for report")
    (options, args) = parser.parse_args()

    if not options.date:
        # TODO: calculate last-week Monday
        parser.print_help()
        sys.exit()
        
    if options.input:
        csv_file = options.input
    else:
        csv_file = os.path.expanduser("~master/data/signout_logs_in/signouts-%s.csv") % options.date
    if os.path.exists(csv_file) and os.path.splitext(csv_file)[-1] == ".csv":
        rows = import_csv(csv_file)
        signout_report(rows, _iso8601_to_date(options.date), format=options.format)
    else:
        parser.print_help()
        sys.exit()